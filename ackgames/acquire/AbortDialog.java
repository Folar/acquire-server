/*
	A basic extension of the java.awt.Dialog class
 */
package ackgames.acquire;
import java.awt.*;

public class AbortDialog extends Dialog
{
	public AbortDialog(Frame parent)
	{
		super(parent);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(java.awt.Color.lightGray);
		setSize(338,100);
		setVisible(false);
		label1.setText("Do you really want to end the Acquire Game prematurely?");
		add(label1);
		label1.setFont(new Font("Dialog", Font.BOLD, 12));
		label1.setBounds(12,24,335,24);
		yes.setLabel("Yes");
		add(yes);
		yes.setBackground(java.awt.Color.lightGray);
		yes.setBounds(100,55,48,24);
		no.setLabel("No");
		add(no);
		no.setBackground(java.awt.Color.lightGray);
		no.setBounds(175,55,48,24);
		setTitle("Quit Acquire");
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		yes.addActionListener(lSymAction);
		no.addActionListener(lSymAction);
		//}}
	}
	
	public AbortDialog(Frame parent, boolean modal)
	{
		this(parent);
        setModal(modal);
	}
	
	public void addNotify()
	{
  	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;


    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
		    quit =false;
			Rectangle bounds = getParent().getBounds();
			Rectangle abounds = getBounds();
	
			setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
				 bounds.y + (bounds.height - abounds.height)/2);
		}
		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Label label1 = new java.awt.Label();
	java.awt.Button yes = new java.awt.Button();
	java.awt.Button no = new java.awt.Button();
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == AbortDialog.this)
				AbortDialog_WindowClosing(event);
		}
	}
	
	void AbortDialog_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == yes)
				yes_ActionPerformed(event);
			else if (object == no)
				no_ActionPerformed(event);
		}
	}
    public boolean quit = false;
	void yes_ActionPerformed(java.awt.event.ActionEvent event)
	{
		setVisible(false);
		quit =true;	 
	}

	void no_ActionPerformed(java.awt.event.ActionEvent event)
	{
		setVisible(false);
			 
	}

    public boolean isQuit() {
        return quit;
    }

}
